import os

# ----------------- Listas globais -----------------
clientes = []
veiculos = []
ordens_servico = []

# ----------------- Funcoes de inicializacao -----------------
def verificar_existencia(caminho_arquivo):
    if not os.path.exists(caminho_arquivo):
        with open(caminho_arquivo, 'w') as f:
            pass

def carregar_dados():
    arquivos = ['clientes.txt', 'veiculos.txt', 'ordens_servico.txt']
    for arquivo in arquivos:
        verificar_existencia(arquivo)

    clientes.clear()
    veiculos.clear()
    ordens_servico.clear()

    with open('clientes.txt', 'r') as f:
        for linha in f:
            clientes.append(linha.strip().split(';'))
    with open('veiculos.txt', 'r') as f:
        for linha in f:
            veiculos.append(linha.strip().split(';'))
    with open('ordens_servico.txt', 'r') as f:
        for linha in f:
            ordens_servico.append(linha.strip().split(';'))

def salvar_dados():
    with open('clientes.txt', 'w') as f:
        for c in clientes:
            f.write(';'.join(c) + '\n')
    with open('veiculos.txt', 'w') as f:
        for v in veiculos:
            f.write(';'.join(v) + '\n')
    with open('ordens_servico.txt', 'w') as f:
        for o in ordens_servico:
            f.write(';'.join(o) + '\n')

# ----------------- Funcoes de busca -----------------
def buscar_cliente_por_cpf(cpf):
    for cliente in clientes:
        if cliente[0] == cpf:
            return cliente
    return None

def buscar_veiculo_por_placa(placa):
    for veiculo in veiculos:
        if veiculo[0] == placa:
            return veiculo
    return None

def buscar_os_por_numero(numero_os):
    for os in ordens_servico:
        if os[0] == numero_os:
            return os
    return None

# ----------------- Validacoes -----------------
def entrada_numerica(msg, tipo=int, minimo=None, maximo=None):
    while True:
        valor = input(msg)
        try:
            valor_convertido = tipo(valor)
            if minimo is not None and valor_convertido < minimo:
                print(f"Valor deve ser maior ou igual a {minimo}.")
                continue
            if maximo is not None and valor_convertido > maximo:
                print(f"Valor deve ser menor ou igual a {maximo}.")
                continue
            return valor_convertido
        except ValueError:
            print("‚ùå Entrada inv√°lida. Tente novamente.")

# ----------------- Cadastro -----------------
def cadastrar_cliente():
    cpf = input("CPF (somente n√∫meros): ")
    if not cpf.isdigit():
        print("‚ùå CPF inv√°lido.")
        return
    if buscar_cliente_por_cpf(cpf):
        print("‚ö†Ô∏è CPF j√° cadastrado.")
        return
    nome = input("Nome completo: ")
    telefone = input("Telefone (somente n√∫meros): ")
    if not telefone.isdigit():
        print("‚ùå Telefone inv√°lido.")
        return
    clientes.append([cpf, nome, telefone])
    salvar_dados()
    print("‚úÖ Cliente cadastrado com sucesso.")

def cadastrar_veiculo():
    placa = input("Placa: ")
    if buscar_veiculo_por_placa(placa):
        print("‚ö†Ô∏è Placa j√° cadastrada.")
        return
    modelo = input("Modelo: ")
    ano = entrada_numerica("Ano: ", int, 1900, 2100)
    cpf = input("CPF do propriet√°rio: ")
    if not cpf.isdigit():
        print("‚ùå CPF inv√°lido.")
        return
    if not buscar_cliente_por_cpf(cpf):
        print("‚ùå Cliente n√£o encontrado.")
        return
    veiculos.append([placa, modelo, str(ano), cpf])
    salvar_dados()
    print("‚úÖ Ve√≠culo cadastrado com sucesso.")

def cadastrar_ordem_servico():
    numero_os = input("N√∫mero da OS: ")
    if buscar_os_por_numero(numero_os):
        print("‚ö†Ô∏è N√∫mero da OS j√° existe.")
        return
    descricao = input("Descri√ß√£o do servi√ßo: ")
    valor = entrada_numerica("Valor: ", float, 0)
    cpf = input("CPF do cliente: ")
    if not cpf.isdigit():
        print("‚ùå CPF inv√°lido.")
        return
    placa = input("Placa do ve√≠culo: ")
    if not buscar_cliente_por_cpf(cpf):
        print("‚ùå Cliente n√£o encontrado.")
        return
    if not buscar_veiculo_por_placa(placa):
        print("‚ùå Ve√≠culo n√£o encontrado.")
        return
    ordens_servico.append([numero_os, descricao, f"{valor:.2f}", cpf, placa])
    salvar_dados()
    print("‚úÖ Ordem de servi√ßo cadastrada com sucesso.")

# ----------------- Consulta -----------------
def listar_clientes():
    print("\nüìã Lista de Clientes:")
    for c in clientes:
        print(f"CPF: {c[0]} | Nome: {c[1]} | Telefone: {c[2]}")

def listar_veiculos():
    print("\nüöó Lista de Ve√≠culos:")
    for v in veiculos:
        print(f"Placa: {v[0]} | Modelo: {v[1]} | Ano: {v[2]} | CPF: {v[3]}")

def listar_ordens_servico():
    print("\nüßæ Lista de Ordens de Servi√ßo:")
    for o in ordens_servico:
        print(f"N¬∫: {o[0]} | Desc: {o[1]} | Valor: {o[2]} | CPF: {o[3]} | Placa: {o[4]}")

def consultar_veiculos_por_cpf():
    cpf = input("Digite o CPF do cliente: ")
    encontrados = [v for v in veiculos if v[3] == cpf]
    if encontrados:
        for v in encontrados:
            print(f"Placa: {v[0]} | Modelo: {v[1]} | Ano: {v[2]}")
    else:
        print("‚ùå Nenhum ve√≠culo encontrado.")

def consultar_os():
    opcao = input("Consultar por (1) CPF ou (2) N√∫mero da OS: ")
    if opcao == '1':
        cpf = input("Digite o CPF: ")
        encontrados = [o for o in ordens_servico if o[3] == cpf]
    else:
        numero_os = input("Digite o n√∫mero da OS: ")
        encontrados = [o for o in ordens_servico if o[0] == numero_os]
    if encontrados:
        for o in encontrados:
            print(f"N¬∫: {o[0]} | Desc: {o[1]} | Valor: {o[2]} | CPF: {o[3]} | Placa: {o[4]}")
    else:
        print("‚ùå Nenhuma ordem encontrada.")

# ----------------- Edicao -----------------
def editar_cliente():
    cpf = input("Digite o CPF do cliente: ")
    cliente = buscar_cliente_por_cpf(cpf)
    if not cliente:
        print("‚ùå Cliente n√£o encontrado.")
        return
    novo_nome = input("Novo nome: ")
    novo_telefone = input("Novo telefone (somente n√∫meros): ")
    if not novo_telefone.isdigit():
        print("‚ùå Telefone inv√°lido.")
        return
    cliente[1], cliente[2] = novo_nome, novo_telefone
    salvar_dados()
    print("‚úÖ Cliente atualizado.")

def editar_veiculo():
    placa = input("Digite a placa do ve√≠culo: ")
    veiculo = buscar_veiculo_por_placa(placa)
    if not veiculo:
        print("‚ùå Ve√≠culo n√£o encontrado.")
        return
    novo_modelo = input("Novo modelo: ")
    novo_ano = entrada_numerica("Novo ano: ", int, 1900, 2100)
    veiculo[1], veiculo[2] = novo_modelo, str(novo_ano)
    salvar_dados()
    print("‚úÖ Ve√≠culo atualizado.")

def editar_ordem_servico():
    numero_os = input("Digite o n√∫mero da OS: ")
    os = buscar_os_por_numero(numero_os)
    if not os:
        print("‚ùå Ordem n√£o encontrada.")
        return
    nova_desc = input("Nova descri√ß√£o: ")
    novo_valor = entrada_numerica("Novo valor: ", float, 0)
    os[1], os[2] = nova_desc, f"{novo_valor:.2f}"
    salvar_dados()
    print("‚úÖ Ordem de servi√ßo atualizada.")

# ----------------- Exclusao -----------------
def excluir_cliente():
    cpf = input("Digite o CPF do cliente: ")
    global clientes, veiculos, ordens_servico
    if not buscar_cliente_por_cpf(cpf):
        print("‚ùå Cliente n√£o encontrado.")
        return
    clientes = [c for c in clientes if c[0] != cpf]
    veiculos = [v for v in veiculos if v[3] != cpf]
    ordens_servico = [o for o in ordens_servico if o[3] != cpf]
    salvar_dados()
    print("‚úÖ Cliente e dados relacionados exclu√≠dos.")

def excluir_veiculo():
    placa = input("Digite a placa do ve√≠culo: ")
    if not buscar_veiculo_por_placa(placa):
        print("‚ùå Ve√≠culo n√£o encontrado.")
        return
    global veiculos
    veiculos = [v for v in veiculos if v[0] != placa]
    ordens_servico[:] = [o for o in ordens_servico if o[4] != placa]
    salvar_dados()
    print("‚úÖ Ve√≠culo exclu√≠do.")

def excluir_ordem_servico():
    numero_os = input("Digite o n√∫mero da OS: ")
    if not buscar_os_por_numero(numero_os):
        print("‚ùå Ordem n√£o encontrada.")
        return
    global ordens_servico
    ordens_servico = [o for o in ordens_servico if o[0] != numero_os]
    salvar_dados()
    print("‚úÖ Ordem de servi√ßo exclu√≠da.")

# ----------------- Menu principal -----------------
def menu():
    carregar_dados()
    while True:
        print("\n=== MENU PRINCIPAL ===")
        print("1. Cadastrar cliente")
        print("2. Cadastrar ve√≠culo")
        print("3. Cadastrar ordem de servi√ßo")
        print("4. Listar clientes")
        print("5. Listar ve√≠culos")
        print("6. Listar ordens de servi√ßo")
        print("7. Consultar ve√≠culos por CPF")
        print("8. Consultar ordens de servi√ßo")
        print("9. Editar cliente")
        print("10. Editar ve√≠culo")
        print("11. Editar ordem de servi√ßo")
        print("12. Excluir cliente")
        print("13. Excluir ve√≠culo")
        print("14. Excluir ordem de servi√ßo")
        print("0. Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        try:
            if opcao == '1': cadastrar_cliente()
            elif opcao == '2': cadastrar_veiculo()
            elif opcao == '3': cadastrar_ordem_servico()
            elif opcao == '4': listar_clientes()
            elif opcao == '5': listar_veiculos()
            elif opcao == '6': listar_ordens_servico()
            elif opcao == '7': consultar_veiculos_por_cpf()
            elif opcao == '8': consultar_os()
            elif opcao == '9': editar_cliente()
            elif opcao == '10': editar_veiculo()
            elif opcao == '11': editar_ordem_servico()
            elif opcao == '12': excluir_cliente()
            elif opcao == '13': excluir_veiculo()
            elif opcao == '14': excluir_ordem_servico()
            elif opcao == '0': break
            else: print("‚ùå Op√ß√£o inv√°lida.")
        except Exception as e:
            print("‚ö†Ô∏è Erro inesperado:", e)

# Executa o menu
menu()
