# Exerc√≠cios B√°sicos (1‚Äì20)
# Crie uma fun√ß√£o que receba um nome e imprima uma sauda√ß√£o personalizada.
def hello(nome):
 print("Seja bem-vindo", nome) # NOME √© o parametro
a=input("DIGITE SEU NOME: ")
hello(a) 

# Crie uma fun√ß√£o que receba dois n√∫meros e retorne sua soma.
def soma():
    a = float(input("Digite o primeiro n√∫mero: "))
    b = float(input("Digite o segundo n√∫mero: "))
    res = a + b
    print("A soma √©:", res)
soma()

# Escreva uma fun√ß√£o que calcule o quadrado de um n√∫mero.
def verificar_par():
    numero = float(input("Digite um n√∫mero: "))
    if numero%2==0:
        print("O n√∫mero", numero, "√© par.")
    else:
        print("O n√∫mero", numero, "√© √≠mpar.")
verificar_par()

# Escreva uma fun√ß√£o que verifique se um n√∫mero √© par.
def verificar_impar():
    numero = float(input("Digite um n√∫mero: "))
    if numero%2!=0:
        print("O n√∫mero", numero, "√© √≠mpar.")
    else:
        print("O n√∫mero", numero, "n√£o √© impar.")
verificar_impar()

# Escreva uma fun√ß√£o que receba uma lista de n√∫meros e retorne o maior elemento.
def maior_numero():
    lista_numeros = input("Digite uma lista de n√∫meros inteiros separados por v√≠rgula: ")
    numeros = [int(num) for num in lista_numeros.split(",")]
    maior = numeros[0] 
    for num in numeros:
        if num > maior:
            maior = num
    print("O maior n√∫mero √©:", maior)
maior_numero()

# Crie uma fun√ß√£o que calcule o fatorial de um n√∫mero (sem usar recurs√£o).
def fatorial():
    numero = int(input("DIGITE UM N√öMERO: "))
    if numero < 0:
        return "DIGITE UM N√öMERO MAIOR QUE ZERO."
    elif numero == 0 or numero == 1:
        return 1
    else:
        resultado = 1
        for i in range(2, numero + 1):
            resultado *= i
        return resultado
fatorial_resultado = fatorial()
print("O fatorial √©:", fatorial_resultado)

# Crie uma fun√ß√£o que receba um n√∫mero e retorne True se ele for primo.
def num_primo():
    numero = int(input("Digite um n√∫mero: "))
    if numero <= 1:
        return False
    for i in range(2, int(numero**0.5) + 1):
        if numero % i == 0:
            return False
    return True
if num_primo():
    print("O n√∫mero √© primo.")
else:
    print("O n√∫mero n√£o √© primo.")


# Crie uma fun√ß√£o que inverta uma string.
def inverter_string():
    texto = input("Digite uma string: ")
    texto_invertido = texto[::-1]
    print("String invertida:", texto_invertido)

# Crie uma fun√ß√£o que receba uma lista de nomes e retorne apenas os nomes com mais de 5 letras.
def nomes_digitados5letras():
    lista = input("DIGITE OS NOMES SEPARADOS POR VIRGULA: ")
    return [nome.strip() for nome in lista.split(",") if len(nome.strip()) > 5]

print(nomes_digitados5letras())

# Escreva uma fun√ß√£o que conte quantas vogais h√° em uma string.
def contar_vogais():
    texto = input("Digite uma string: ")
    vogais = "aeiouAEIOU"
    contador = 0
    for letra in texto:
        if letra in vogais:
            contador += 1
    print("Quantidade de vogais:", contador)

# Crie uma fun√ß√£o que receba um n√∫mero e retorne uma lista com todos os divisores dele.
def divisores():
    numero = int(input("Digite um n√∫mero inteiro: "))
    lista_divisores = []
    for i in range(1, numero + 1):
        if numero % i == 0:
            lista_divisores.append(i)
    print(f"Divisores de {numero}: {lista_divisores}")

# Crie uma fun√ß√£o que converta graus Celsius para Fahrenheit.
def celsius_para_fahrenheit()
    celsius = float(input("Digite a temperatura em graus Celsius: "))
    fahrenheit = (celsius * 9/5) + 32
    print(f"{celsius}¬∞C √© igual a {fahrenheit}¬∞F")
    
# Crie uma fun√ß√£o que receba uma string e retorne a mesma string sem espa√ßos.
def remove_espaco():
  lista_de_strings = ["Ana", "Pedro", "S√£o Paulo", "Guerra"]
  lista_sem_espacos = [item.replace(" ", "") for item in lista_de_strings]
  return lista_sem_espacos
resultado = remove_espaco()
print(resultado)

# Crie uma fun√ß√£o que receba uma lista e retorne a m√©dia dos elementos.
def media_lista():
    lista_numeros = input("Digite uma lista de n√∫meros separados por v√≠rgula: ")
    numeros = [float(num) for num in lista_numeros.split(",")]
    media = sum(numeros) / len(numeros)
    print("A m√©dia √©:", media)

# Escreva uma fun√ß√£o que receba uma palavra e retorne True se ela for um pal√≠ndromo.
def verificar_palindromo():
    palavra = input("Digite uma palavra: ")
    palavra_invertida = palavra[::-1]
    if palavra.lower() == palavra_invertida.lower():
        print("A palavra √© um pal√≠ndromo.")
    else:
        print("A palavra n√£o √© um pal√≠ndromo.")

# Crie uma fun√ß√£o que gere uma lista com os n primeiros n√∫meros pares.
def numeros_pares(n):
    return [i for i in range(2, n * 2 + 1, 2)]

# Escreva uma fun√ß√£o que receba um n√∫mero e retorne a tabuada dele (de 1 a 10).
def tabuada(numero):
    for i in range(1, 11):
        print(f"{numero} x {i} = {numero * i}")

# Crie uma fun√ß√£o que calcule a √°rea de um ret√¢ngulo (base √ó altura).
def area_retangulo():
    altura = float(input("Digite a altura do ret√¢ngulo: "))
    base = float(input("Digite a base do ret√¢ngulo: "))
    area = base * altura
    print("A √°rea do ret√¢ngulo √©:", area)
area_retangulo()

# Crie uma fun√ß√£o que retorne o menor valor entre tr√™s n√∫meros.
def menor_valor():
    a = float(input("Digite o primeiro n√∫mero: "))
    b = float(input("Digite o segundo n√∫mero: "))
    c = float(input("Digite o terceiro n√∫mero: "))
    menor = min(a, b, c)
    print("O menor valor √©:", menor)
menor_valor()

# Escreva uma fun√ß√£o que simule o lan√ßamento de um dado de 6 faces (use random.randint).
def lancamento_dado():
    import random
    resultado = random.randint(1, 6)
    print("O resultado do lan√ßamento do dado √©:", resultado)
lancamento_dado()

# üü° Exerc√≠cios Intermedi√°rios (21‚Äì40)
# Crie uma fun√ß√£o que receba uma lista de n√∫meros e retorne uma nova lista com os n√∫meros elevados ao quadrado.
def elevar_ao_quadrado(lista):
    return [numero ** 2 for numero in lista]
entrada = input("Digite os n√∫meros separados por espa√ßo: ")
numeros = [int(x) for x in entrada.split()]
resultado = elevar_ao_quadrado(numeros)
print("N√∫meros ao quadrado:", resultado)

# Crie uma fun√ß√£o que calcule a soma dos d√≠gitos de um n√∫mero inteiro.
def soma_digitos(numero):
   n= int(input("Digite um n√∫mero inteiro: "))
   soma = 0
   for digito in str(n):
       soma += int(digito)
   return soma
print("A soma dos d√≠gitos √©:", soma_digitos(0))

# Escreva uma fun√ß√£o que receba uma frase e retorne a quantidade de palavras.
def contar_palavras(frase):
    if not frase:
        return 0
    frase = frase.strip()
    palavras = frase.split()
    return len(palavras)
frase_digitada = input("Digite uma frase: ")
print("Quantidade de palavras:", contar_palavras(frase_digitada))

# Crie uma fun√ß√£o que substitua todas as vogais de uma string por "*".
def substituir_vogais(frase):
    vogais = "aeiouAEIOU"
    for vogal in vogais:
        frase = frase.replace(vogal, "*")
    return frase
frase_digitada = input("Digite uma frase: ")
print("Frase com vogais substitu√≠das:", substituir_vogais(frase_digitada))

# Crie uma fun√ß√£o que receba uma lista e retorne os elementos √∫nicos (sem usar set).
def elementos_unicos(lista):
    unicos = []
    for item in lista:
        if item not in unicos:
            unicos.append(item)
    return unicos
lista = input("Digite os elementos da lista separados por v√≠rgula: ").split(",")
print("Elementos √∫nicos:", elementos_unicos(lista))

# Crie uma fun√ß√£o que receba uma lista e um n√∫mero n, e retorne os n maiores valores da lista.
def n_maiores(lista, n):
    if n > len(lista):
        return "O valor de n √© maior que o tamanho da lista."
    lista_ordenada = sorted(lista, reverse=True)
    return lista_ordenada[:n]
lista_numeros = input("Digite os n√∫meros separados por v√≠rgula: ").split(",")
print("Os 3 maiores n√∫meros s√£o:", n_maiores(lista_numeros, 3))

# Escreva uma fun√ß√£o que calcule a √°rea de um tri√¢ngulo (base √ó altura √∑ 2).
# Crie uma fun√ß√£o recursiva para calcular o fatorial de um n√∫mero.
# Crie uma fun√ß√£o recursiva que calcule o n-√©simo n√∫mero da sequ√™ncia de Fibonacci.
# Escreva uma fun√ß√£o que embaralhe os caracteres de uma string (use random.shuffle).
# Crie uma fun√ß√£o que simule uma calculadora simples (opera√ß√µes: +, -, *, /), com tr√™s par√¢metros: n√∫mero 1, n√∫mero 2 e opera√ß√£o.
# Crie uma fun√ß√£o que retorne os n√∫meros pares de uma lista usando list comprehension.
# Escreva uma fun√ß√£o que recebe um n√∫mero decimal e retorna sua representa√ß√£o bin√°ria.
# Escreva uma fun√ß√£o que receba uma lista e retorne um dicion√°rio com a contagem de cada elemento.
# Crie uma fun√ß√£o que receba uma data (dia, m√™s, ano) e diga se ela √© v√°lida (considere apenas datas do calend√°rio gregoriano, sem considerar anos bissextos).
# Escreva uma fun√ß√£o que identifique o segundo maior n√∫mero em uma lista.
# Crie uma fun√ß√£o que receba uma lista de strings e retorne a maior delas.
# Escreva uma fun√ß√£o que calcule a dist√¢ncia entre dois pontos (x1, y1) e (x2, y2).
# Crie uma fun√ß√£o que receba o valor de uma compra e retorne o valor com 10% de desconto.
# Crie uma fun√ß√£o que calcule juros compostos: montante = capital * (1 + taxa) ** tempo.

# üî¥ Exerc√≠cios Avan√ßados (41‚Äì50)
# Crie uma fun√ß√£o decoradora que registre o tempo de execu√ß√£o de outra fun√ß√£o.
# Crie uma fun√ß√£o que retorne uma fun√ß√£o interna (closure) que acumula valores.
# Crie uma fun√ß√£o que receba um CPF em formato string e valide-o.
# Escreva uma fun√ß√£o que leia um arquivo texto e conte quantas palavras ele possui.
# Crie uma fun√ß√£o que use filter() e lambda para filtrar n√∫meros maiores que 10 de uma lista.
# Escreva uma fun√ß√£o que utilize zip para unir duas listas em um dicion√°rio.
# Escreva uma fun√ß√£o que leia uma matriz (lista de listas) e retorne sua transposta.
# Crie uma fun√ß√£o que gere senhas seguras com letras, n√∫meros e s√≠mbolos (use random.choice).
# Crie uma fun√ß√£o que detecte anagramas entre duas palavras.
# Crie uma fun√ß√£o que verifique se uma Sudoku 9x9 est√° corretamente preenchida (sem n√∫meros repetidos por linha, coluna e regi√£o 3x3).
